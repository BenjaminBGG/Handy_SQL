--Check various database encryption statistics, identify unencrypted databases
USE [master]
GO

SELECT d.database_id                    [DB ID],
       d.name                           [Database Name],
       Isnull(CASE k.encryption_state
                WHEN 0 THEN '0 - No key present, not encrypted'
                WHEN 1 THEN '1 - Unencrypted'
                WHEN 2 THEN '2 - Encryption in progress'
                WHEN 3 THEN '3 - Encrypted'
                WHEN 4 THEN '4 - Key change in progress'
                WHEN 5 THEN '5 - Decryption in progress'
                WHEN 6 THEN '6 - Certificate change in progress'
              END, 'DISABLED')     [Encryption State],
       k.key_algorithm + ' '
       + CONVERT(VARCHAR, k.key_length) [Key Algorithm],
       k.percent_complete               [% Complete],
       c.name                           [Cert Name]
FROM   sys.databases d
       LEFT OUTER JOIN sys.dm_database_encryption_keys k
                    ON d.database_id = k.database_id
       LEFT OUTER JOIN sys.certificates c
                    ON k.encryptor_thumbprint = c.thumbprint
--Use the following WHERE clause to filter out databases to a certain subset, if desired
--WHERE  ( d.name LIKE 'A%'
--          OR d.name LIKE 'T%'
--          OR d.name LIKE 'F%' )
--       AND d.name <> 'tempdb'
ORDER  BY d.name 

--------------STEP ONE------------------
----Back up the service master key (store it off-site in a secured location!!!)
----The service master key is generated by SQL during setup and needs to be restored to all other servers
----that you want to share the same encryption (i.e. databases)
--BACKUP SERVICE MASTER KEY TO FILE = 'path_to_file' 
    --ENCRYPTION BY PASSWORD = 'password'

--RESTORE SERVICE MASTER KEY FROM FILE = 'path_to_file' 
    --DECRYPTION BY PASSWORD = 'same_password_as_above' --[FORCE]

--------------STEP TWO------------------
----Create a database master key (back this guy up off-site as well)
----Like the service master key, you'll want to put this on your other servers
--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'password'

--BACKUP MASTER KEY TO FILE = 'path_to_file' 
    --ENCRYPTION BY PASSWORD = 'password'

--RESTORE MASTER KEY FROM FILE = 'path_to_file'
	--DECRYPTION BY PASSWORD = 'same_password_as_above'
	--ENCRYPTION BY PASSWORD = 'new_or_same_password_as_above' --[FORCE]

----If you don't run this next statement, you'll have to OPEN MASTER KEY for each connection (obviously not practical)
----With the master key protected with the service master key, it will be automatically opened each time
--OPEN MASTER KEY DECRYPTION BY PASSWORD = 'password'
--ALTER MASTER KEY ADD ENCRYPTION BY SERVICE MASTER KEY

--------------STEP THREE----------------
----Create a certificate for use in generating encryption keys for individual databases.
----Back this certificate up off-site and restore to other servers as necessary.
--USE [master]
--GO
--CREATE CERTIFICATE [Name of certificate] 
--   WITH SUBJECT = 'Subject goes here', 
--   EXPIRY_DATE = 'Somedate'; --This doesn't matter so much; you may be able to omit it entirely
--GO

--BACKUP CERTIFICATE [Name of certificate] TO FILE = 'path_to_cert_file'
--WITH PRIVATE KEY (
--	FILE = 'path_to_pk_file',
--	ENCRYPTION BY PASSWORD = 'password'
--	)

----Restore cert onto another server
--CREATE CERTIFICATE [Name of certificate] FROM FILE = 'path_to_cert_file'
--WITH PRIVATE KEY (
--	FILE = 'path_to_pk_file',
--	DECRYPTION BY PASSWORD = 'password'
--	)

--------------STEP FOUR-----------------
----This stuff you'll have to do for each database
----Create a DB encryption key for the database you want to encrypt (must be done for each database)
--USE [XXXXX]
--GO
--CREATE DATABASE ENCRYPTION KEY
--WITH ALGORITHM = AES_256 --Also available: AES_128, 192, 256, TRIPLE_DES_3KEY
--ENCRYPTION BY SERVER CERTIFICATE [Certificate name]
--GO

----Apply encryption to database specified below (must be done for each database)
--ALTER DATABASE [XXXXX]
--SET ENCRYPTION ON
--GO


